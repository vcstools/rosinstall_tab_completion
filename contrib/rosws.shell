# Software License Agreement (BSD License)
#
# Copyright (c) 2010, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: tkruse 

# constants local to this script
_var_undo_backup_var_name_suffix=_VAR_UNDO_BACKUP
_var_undo_pre_var_name_suffix=_VAR_UNDO_PREFIX
_var_undo_suf_var_name_suffix=_VAR_UNDO_SUFFIX


# uses env to lookup an env var by name by the first argument $1
_var_undo_get_env_var () {
    echo `/usr/bin/env |grep ^$1=|sed 's/'"$1"'=//'`
}

# stores an env var with name $1 to a designated backup env var 
_var_undo_backup_var () {
    export $1$_var_undo_backup_var_name_suffix=`_var_undo_get_env_var $1`
}

_var_undo_backup_diff_var () {
    local new_value old_value new_value_esc old_value_esc

    # stores the diff pre and suffix between current and stored value of env var with name $1 
    old_value=`_var_undo_get_env_var $1$_var_undo_backup_var_name_suffix`
    old_value_esc=`echo "$old_value" | sed 's,\([\[\.\\\*\^\$\"]\|\]\),\\\\\1,g'`
    new_value=`_var_undo_get_env_var $1`

    if [ -n "$old_value" -a "$new_value" != "$old_value" ]; then
        # get suffix by replacing in new var the old var with nil
        if [ -n "$new_value" -a "$new_value" != "$old_value" ]; then
            export $1$_var_undo_suf_var_name_suffix=`echo "$new_value" |sed "s,.*${old_value_esc}\(.*\),\1,"`
            export $1$_var_undo_pre_var_name_suffix=`echo "$new_value" |sed "s,\(.*\)${old_value_esc}.*,\1,"`
        fi
    else
        # old value was empty
        if [ "$new_value" != "$old_value" ]; then
            export $1$_var_undo_pre_var_name_suffix=$new_value
        fi
    fi
}

_var_undo_restore_var () {
    local new_value old_value old_prefix old_suffix old_value_esc old_prefix_esc old_suffix_esc
    # removes from the middle of a given var of name $1 previously stored prefix and suffix (that may now not be pre or suffixes anymore)
    ## escape backslash for windows paths
    new_value=`/usr/bin/env |grep ^$1=|sed 's/'"$1"'=//'`
    old_value=`_var_undo_get_env_var $1$_var_undo_backup_var_name_suffix`
    old_value_esc=`echo $old_value | sed 's,\([\[\.\\\*\^\$\"]\|\]\),\\\\\1,g'`
    old_prefix=`_var_undo_get_env_var $1$_var_undo_pre_var_name_suffix`
    old_prefix_esc=`echo $old_prefix | sed 's,\([\[\.\\\*\^\$\"]\|\]\),\\\\\1,g'`
    old_suffix=`_var_undo_get_env_var $1$_var_undo_suf_var_name_suffix`
    old_suffix_esc=`echo $old_suffix | sed 's,\([\[\.\\\*\^\$\"]\|\]\),\\\\\1,g'`
    if [ -n "$old_prefix" -o -n "$old_suffix" ]; then
        export $1=`echo $new_value | sed "s,${old_prefix_esc}${old_value_esc}${old_suffix_esc},${old_value_esc},"`
        echo Restored var: $1
    fi
    unset $1$_var_undo_backup_var_name_suffix
    unset $1$_var_undo_pre_var_name_suffix
    unset $1$_var_undo_suf_var_name_suffix

}


# overwrite bash completion var
_ROSWS_BASE_COMMANDS="help init set merge info remove regenerate diff status update --version reload switch leave"


_rosws_main()
{
  local result
  /usr/bin/env python -c "from __future__ import print_function;\
import sys, pkg_resources, rosinstall.rosws_cli;\
from rosinstall.helpers import ROSInstallException;\
from rosinstall.common import MultiProjectException;\
sys.exit(rosinstall.rosws_cli.rosws_main(sys.argv[0:]))" $*
}

_rosws_get_workspace()
{
echo `/usr/bin/env python << EOPYTHON
import pkg_resources, sys, os
import rosinstall.rosws_cli;
try:
  print(rosinstall.cli_common.get_workspace(sys.argv, os.getcwd(), config_filename = '.rosinstall'))
except:
  pass

EOPYTHON`
}

# If $1 
_rosws_maybe_reload()
{
  if [ "$?" -eq 0 ]; then
      workspace=`_rosws_get_workspace $*`
      if [ "$?" -eq 0 ]; then
          workspace=`_rosws_abspath $workspace`
          if [ $workspace = "$ROS_WORKSPACE" ]; then
              rosws reload
          fi
      fi
  fi

}

_rosws_abspath()
{
    local rosws_dirname rosws_basename abspath
    rosws_dirname=`dirname "$1"`
    rosws_basename=`basename "$1"`
    if [ "$rosws_basename" = "." ]; then
        rosws_basename=
    else
        rosws_basename=/$rosws_basename
    fi
    abspath="`cd \"$rosws_dirname\" 2>/dev/null && pwd || echo \"$rosws_dirname\"`$rosws_basename"
    echo `realpath "$abspath"`
}

_rosws_leave()
{
  _var_undo_restore_var PATH
  _var_undo_restore_var PYTHONPATH
  _var_undo_restore_var CMAKE_PREFIX_PATH
  _var_undo_restore_var LD_LIBRARY_PATH
  _var_undo_restore_var PKG_CONFIG_PATH
  if [ ! -z "$ROS_WORKSPACE" ]; then
    _ROSWS_LAST_WORKSPACE=$ROS_WORKSPACE
    unset ROS_WORKSPACE
    echo Unset var: ROS_WORKSPACE
  fi
  if [ ! -z "$ROS_PACKAGE_PATH" ]; then
    unset ROS_PACKAGE_PATH
    echo Unset var: ROS_PACKAGE_PATH
  fi
  if [ ! -z "$ROS_ROOT" ]; then
    unset ROS_ROOT
    echo Unset var: ROS_ROOT
  fi
}

# sources setup.sh restoring env vars first
_rosws_source()
{
  if [ ! -f "$1/setup.sh" ]; then
    echo "No such file to source '$1/setup.sh'"
  else
    _rosws_leave
  
    _var_undo_backup_var  PATH
    _var_undo_backup_var  PYTHONPATH
    _var_undo_backup_var  CMAKE_PREFIX_PATH
    _var_undo_backup_var  LD_LIBRARY_PATH
    _var_undo_backup_var  PKG_CONFIG_PATH
  

    echo old ws $_ROSWS_LAST_WORKSPACE
    . $1/setup.sh
    echo new ws $1
    export ROS_WORKSPACE=$1
    echo "Sourced $1/setup.sh"
  
    _var_undo_backup_diff_var PATH
    _var_undo_backup_diff_var PYTHONPATH
    _var_undo_backup_diff_var CMAKE_PREFIX_PATH
    _var_undo_backup_diff_var LD_LIBRARY_PATH
    _var_undo_backup_diff_var PKG_CONFIG_PATH
  fi
}

rosws()
{
    local i workspace workspace2
    # _call_rosws

    if [ "$#" -eq 0 ]; then
      _rosws_main $*
    else
        if [ "$1" = "switch" ]; then
            if [ "$#" -eq 1 ]; then
                if [ ! -z "$_ROSWS_LAST_WORKSPACE" ]; then
                    rosws switch $_ROSWS_LAST_WORKSPACE
                else
                    echo "No workspace in history, cannot switch back."
                    return 1
                fi
            else
                if [[ "$2" =~ \-\-.* ]]; then
                    _rosws_main $*
                else
                    workspace=`_rosws_abspath $2`
                    if [ ! -f "$workspace/.rosinstall" ]; then
                        if [ "$workspace" = '.' ]; then
                            workspace2=`dirname "$workspace"`
                            if [ ! -f "$workspace2/.rosinstall" ]; then
                                workspace2=`_rosws_get_workspace`
                                if [ ! -f "$workspace2/.rosinstall" ]; then
                                    echo "Did not find $workspace/.rosinstall"
                                    return 1
                                else
                                    workspace=$workspace2
                                fi
                            else
                                workspace=$workspace2
                            fi
                        else
                            echo "Did not find $2/.rosinstall"
                            return 1
                        fi
                    fi
                    if [ ! "$workspace" = "$ROS_WORKSPACE" ]; then
                        _rosws_source $workspace
                    else
                        rosws reload
                    fi
                fi
            fi
        elif [ "$1" = "reload" ]; then
            if [[ ! "$#" -eq 1 ]]; then
                _rosws_main $*
            else
                if [ ! -z "$ROS_WORKSPACE" ]; then
                    _rosws_source $ROS_WORKSPACE
                else
                    echo "Could not determine current workspace from . and ROS_WORKSPACE='$ROS_WORKSPACE'"
                fi
            fi
        elif [ "$1" = "leave" ]; then
            if [[ ! "$#" -eq 1 ]]; then
                _rosws_main $*
            else
                _rosws_leave
             fi
        else
            _rosws_main $*
            if [ "$?" -eq 0 ]; then
                # autosource
                if [ "$1" = "init" ]; then
                    if [[ "$#" -lt 2 ]]; then
                        rosws switch "."
                    else
                        rosws switch "$2"
                    fi
                elif [ "$1" = "merge" ]; then
                    _rosws_maybe_reload $*
                elif [ "$1" = "set" ]; then
                    _rosws_maybe_reload $*
                elif [ "$1" = "remove" ]; then
                    _rosws_maybe_reload $*
                fi
            else
                return 1
            fi
        fi
    fi
}
